/**
 * @mxmlc -target-player=10.0.0 -debug
 */
package sandbox
{
    import flash.display.*;
    import flash.events.*;
	import flash.filters.ColorMatrixFilter;
    import flash.geom.Point;
    import flash.geom.Rectangle;
    import flash.net.URLRequest;
	
	import com.greensock.*;
	import com.greensock.plugins.*;
	
	[SWF(backgroundColor = '0x042836', frameRate = '33', width = '500', height = '300')]

    public class BitmapDataHistogramExample extends Sprite
	{
		private var hist:Vector.<Vector.<Number>>;
		private var original:Bitmap;
		
		[Embed(source = "../assets/apina.jpg")]
		private var Apina:Class;

        public function BitmapDataHistogramExample()
		{
			stage.align = StageAlign.TOP_LEFT;
			stage.scaleMode = StageScaleMode.NO_SCALE;

			loaderInfo.addEventListener(Event.INIT, onInit);
		}
		
		private function onInit(event:Event):void
		{
			TweenPlugin.activate([ColorMatrixFilterPlugin]);
			
			original = new Apina() as Bitmap;
			addChild(original);
			
			duplicateImage(original);
			
			var rec:Rectangle = new Rectangle(10, 10, 190, 160);
			
			// Get vector test
			var vec:Vector.<uint> = original.bitmapData.getVector(rec);
			for (var i:uint = 0; i < vec.length; ++i)
			{
				var val:uint = vec[i];
				vec[i] = Math.ceil(val);
			}
			original.bitmapData.setVector(rec, vec);
			
			/*
			var sp:Sprite = new Sprite();
			sp.graphics.lineStyle(1, 0x343434);
			sp.graphics.beginFill(0x121212, 0.2);
			sp.graphics.drawRect(rec.x, rec.y, rec.width, rec.height);
			addChild(sp);
			 */
			
			/*
			hist = original.bitmapData.histogram(rec);
			prosessHist();
			 */
			
			var matrix:Array = [0.3, 0.59, 0.11, 0, 0,
								0.3, 0.59, 0.11, 0, 0,
								0.3, 0.59, 0.11, 0, 0,
							    0,   0,    0,    1, 0];
			var grayscaleFilter:ColorMatrixFilter = new ColorMatrixFilter(matrix);
			getChildAt(1).filters = [grayscaleFilter];

			duplicateImage(original);
			TweenLite.to(getChildAt(2), 10, { colorMatrixFilter: {saturation: 0} } );
        }

        private function duplicateImage(bm:Bitmap):void
		{
            var image:Bitmap = new Bitmap(bm.bitmapData.clone());
            image.x = image.width * numChildren;
            addChild(image);
        }
		
		/**
		 * @see http://en.wikipedia.org/wiki/Color_histogram
		 */
		private function prosessHist():void
		{
			var len:uint = hist.length;
			for (var i:uint = 0; i < len; ++i)
			{
				// red, green, blue and alpha
				// Each Vector instance contains 256 values that represent the population count of an individual component value, from 0 to 255.
				var vc:Vector.<Number> = hist[i];
				trace(vc.toString());
				// 524,216,126,178,107,99,90,117,103,96,132,126,98,125,130,112,114,131,153,154,154,132,174,149,145,144,175,153,152,167,188,188,180,177,179,162,197,183,211,207,194,194,199,227,223,191,208,184,212,223,210,214,201,209,250,240,263,233,238,246,247,231,228,270,238,263,236,251,254,267,248,257,250,225,251,295,237,247,226,260,267,288,249,226,269,266,261,255,229,273,248,299,248,304,267,318,294,282,255,278,293,307,258,240,264,278,257,287,282,291,253,253,283,269,291,265,256,269,272,252,264,274,259,271,269,269,243,264,255,235,247,248,242,252,252,240,209,238,208,224,232,233,190,209,197,207,197,202,185,208,183,178,180,175,175,165,157,147,139,143,121,121,104,102,102,79,82,69,63,59,67,56,52,70,44,52,56,38,39,40,52,33,56,42,49,51,52,75,80,66,73,72,69,59,67,78,73,79,72,74,76,67,69,79,72,57,69,75,60,54,65,64,79,61,77,55,43,73,47,44,51,54,31,41,44,32,43,35,30,43,20,39,25,31,35,24,39,28,36,20,22,13,13,15,11,11,3,5,9,12,8,7,1,1,7,38
				// 111,98,194,120,199,94,140,112,75,85,122,92,100,127,123,125,153,140,126,131,129,137,120,134,136,146,160,126,139,139,145,122,136,142,149,158,138,141,171,140,165,164,179,167,187,183,219,199,212,206,199,176,211,207,218,223,200,222,228,185,183,205,178,201,221,210,183,217,216,199,234,225,222,208,252,241,241,263,266,274,261,241,262,277,254,280,268,270,280,282,250,285,274,277,275,302,282,308,298,331,297,352,303,293,294,300,268,275,277,264,274,261,273,261,215,249,222,282,228,253,251,223,247,234,217,221,213,213,215,223,218,227,223,226,188,181,197,208,245,212,192,206,184,185,183,168,181,164,155,163,180,176,169,151,199,178,186,160,166,165,157,152,156,149,137,138,136,131,132,138,113,126,128,115,125,109,100,100,95,88,107,87,77,81,78,70,64,60,71,65,76,58,58,59,45,49,37,37,43,32,51,41,37,42,34,45,51,38,26,33,31,44,34,45,45,34,36,46,50,39,53,47,75,64,84,85,92,81,101,93,101,104,92,87,89,106,117,93,94,92,89,92,108,92,78,76,73,73,59,70,66,63,57,39,22,57
				// 102,21,25,33,78,70,119,100,75,230,78,204,104,156,97,106,114,111,128,150,156,164,171,182,172,206,179,209,210,234,188,205,194,249,225,210,239,222,250,217,246,272,248,285,305,297,300,288,301,299,327,276,274,309,314,354,318,321,316,295,309,323,308,323,325,315,320,310,302,330,319,304,329,316,358,336,332,325,331,327,305,329,331,325,297,336,328,313,344,349,320,328,356,332,328,316,315,322,307,306,311,276,320,307,317,294,280,268,265,247,239,250,243,221,220,230,211,219,202,166,218,203,172,186,196,176,169,183,210,174,175,149,164,161,150,143,143,134,136,112,107,123,123,112,114,105,105,93,100,90,102,91,76,88,86,73,73,91,81,76,71,73,64,68,63,63,54,63,60,54,51,56,48,37,44,37,40,54,42,34,34,34,21,37,48,40,44,37,30,40,35,32,38,29,39,41,44,38,50,46,41,43,38,37,48,52,38,40,48,58,55,53,72,50,59,74,61,68,66,70,88,71,77,78,81,95,96,88,99,97,124,109,104,116,85,81,62,57,22,21,18,6,5,6,2,0,1,1,0,0,0,0,0,0,0,0
				// 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40000

			}
		}
    }
}
